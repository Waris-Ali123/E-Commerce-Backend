{
	"info": {
		"_postman_id": "3cbd782b-727a-4257-9536-269b19981f1b",
		"name": "Python Project E-Commerce",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43146900"
	},
	"item": [
		{
			"name": "auth (User)",
			"item": [
				{
					"name": "SignUp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"taha@gmail.com\",\r\n    \"password\" : \"Taha@786\",\r\n    \"full_name\" : \"Taha\",\r\n    \"role\" : \"ADMIN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "signin",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"waris@gmail.com\",\r\n    \"password\" : \"Waris@787\",\r\n    \"full_name\" : \"Waris Ali\",\r\n    \"role\" : \"user\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/signin?email=taha@gmail.com&password=Taha@786",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"signin"
							],
							"query": [
								{
									"key": "email",
									"value": "taha@gmail.com"
								},
								{
									"key": "password",
									"value": "Taha@786"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "showAllUser",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/delete/9",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"delete",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "forgot password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "The Content-Type header field is used to specify the nature of the data in the body of an entity. PayPal REST APIs support application/json."
							},
							{
								"key": "PayPal-Request-Id",
								"value": "d3f5cad7-f3ff-49cb-9353-dac560ba86d4",
								"description": "The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager."
							},
							{
								"key": "PayPal-Client-Metadata-Id",
								"value": "{{paypal_client_metadata_Id}}",
								"description": "Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection."
							},
							{
								"key": "PayPal-Partner-Attribution-Id",
								"value": "TEST_ATTRIBUTION_ID",
								"description": "Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference."
							},
							{
								"key": "PayPal-Auth-Assertion",
								"value": "{{paypal_auth_assertion}}",
								"description": "An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant.\n"
							},
							{
								"key": "Prefer",
								"value": "return=representation",
								"description": "The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>"
							},
							{
								"key": "Prefer",
								"value": "{{prefer_representation_minimal}}",
								"description": "The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>"
							},
							{
								"key": "PayPal-Mock-Response",
								"value": "{ \"mock_application_codes\": \"{{mock_issue}}\" }",
								"description": "For a list of error codes, see https://developer.paypal.com/docs/api/payments/v2/#errors"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": {\n        \"value\": \"60\",\n        \"currency_code\": \"USD\"\n    },\n    \"invoice_id\": \"1749648555\",\n    \"final_capture\": true,\n    \"note_to_payer\": \"If the ordered color is not available, we will substitute with a different color free of charge.\",\n    \"soft_descriptor\": \"Bob's Custom Sweaters\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset-password",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\" : \"sqq941y8YDUV5cjdjcRKJmcwqZjEsomvCmaNoRk8Ky0\",\r\n    \"new_password\" : \"Faizan707@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Products",
			"item": [
				{
					"name": "Add a product for admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"name\": \"Smart Watch\",\r\n    \"description\": \"Touchscreen smartwatch with heart rate monitor, step counter, and notifications.\",\r\n    \"price\": 2599,\r\n    \"stock\": 10,\r\n    \"category\": \"ELECTRONICS\",\r\n    \"image_url\": \"images/smartwatch.png\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a single product for admin",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Rubics Cube\",\r\n    \"description\": \"It is a cube containing six colours. It has to be assembled in such a way that there should be a single colour on each side of cube\",\r\n    \"price\" : 800,\r\n    \"stock\" : 5,\r\n    \"category\" : \"ENTERTAINMENT\",\r\n    \"image_url\" : \"images/cube.png\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating a product by admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 1,\r\n        \"name\": \"Yoga Mat\",\r\n        \"description\": \"Non-slip, eco-friendly yoga mat with carrying strap. Suitable for all yoga styles.\",\r\n        \"price\": 999.0,\r\n        \"stock\": 15,\r\n        \"category\": \"FITNESS\",\r\n        \"image_url\": \"images/yoga_mat.png\",\r\n        \"admin_id\": 1,\r\n        \"admin\": {\r\n            \"id\": 1,\r\n            \"email\": \"yasin@gmail.com\",\r\n            \"name\": \"Yasin\",\r\n            \"role\": \"ADMIN\"\r\n        }\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/admin/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all Products for admin",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Rubics Cube\",\r\n    \"description\": \"It is a cube containing six colours. It has to be assembled in such a way that there should be a single colour on each side of cube\",\r\n    \"price\" : 800,\r\n    \"stock\" : 5,\r\n    \"category\" : \"ENTERTAINMENT\",\r\n    \"image_url\" : \"images/cube.png\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product by admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Rubics Cube\",\r\n    \"description\": \"It is a cube containing six colours. It has to be assembled in such a way that there should be a single colour on each side of cube\",\r\n    \"price\" : 800,\r\n    \"stock\" : 5,\r\n    \"category\" : \"ENTERTAINMENT\",\r\n    \"image_url\" : \"images/cube.png\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/products/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"products",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products (Users)",
			"item": [
				{
					"name": "get a product for user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Searching a product for user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/search?keyword=yoga",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "yoga"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Of products for user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/?category=fitness&max_price=3000&sort_by=name&min_price=25&page=1&page_size=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								""
							],
							"query": [
								{
									"key": "category",
									"value": "fitness"
								},
								{
									"key": "max_price",
									"value": "3000"
								},
								{
									"key": "sort_by",
									"value": "name"
								},
								{
									"key": "min_price",
									"value": "25"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Carts",
			"item": [
				{
					"name": "adding a product to cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/cart/?product_id=1&quantity=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart",
								""
							],
							"query": [
								{
									"key": "product_id",
									"value": "1"
								},
								{
									"key": "quantity",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show cart items",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cart/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete an cart item",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cart/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Quantity",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cart/1?quantity=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart",
								"1"
							],
							"query": [
								{
									"key": "quantity",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checkout",
			"item": [
				{
					"name": "checking out",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/checkout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"checkout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Complete order history",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a particular order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "root url",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "jwt",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ5YXNpbkBnbWFpbC5jb20iLCJleHAiOjE3NDk0ODA0MjcsInJvbGUiOiJBRE1JTiJ9.W5H0r_sxMyxDvvoDlh4h-6Mk47VlauDeNtn6BIRquLw",
			"type": "default"
		},
		{
			"key": "jwt_user",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoYWJpYkBnbWFpbC5jb20iLCJleHAiOjE3NDk0ODYwNDIsInJvbGUiOiJVU0VSIn0.hx55B6ZT9cMUO-TxEpDKgb_IvHQdjXVLuJo_xIzR49w",
			"type": "default"
		}
	]
}